slice(4:7) %>%
kable("latex", booktabs = TRUE) %>%
kable_styling(latex_options = c("striped", "hold_position", "full_width"),
position = "center",
font_size = 8) %>%  # Ajusta el tamaño de la fuente
column_spec(0, width = "0.5cm") %>%  # Ajusta el ancho de la columna
row_spec(0, bold = FALSE)
#| fig-height: 12
#| fig-width: 10
source("Scripts/ggplot_graphics.R")
gg_grafico(lista = df,
estacion = "EPG",
file_name = "EPG",
color_linea = "aquamarine4")
#| fig-height: 6
#| fig-width: 10
source("Scripts/eca_barras.R")
barras_eca(lista = df,
coloreo = "gray90",
ruta = "xd")
#| fig-height: 6
#| fig-width: 10
source("Scripts/eca_barras.R")
barras_eca(lista = df,
coloreo = "gray90",
ruta = "xd")
#| fig-height: 6
#| fig-width: 10
source("Scripts/eca_barras.R")
barras_eca(lista = df,
coloreo = "gray90",
ruta = "xd")
#| fig-cap: "Datos horarios de los parámetros de calidad de aire (ug/m3)"
#| fig-height: 10
#| fig-width: 8
timePlot(
selectByDate(df$df),
pollutant = c("pm10","pm25", "co_8h",
"no2", "o3", "so2", "h2s"),
y.relation = "free",plot.type = "h",
main = "Parámetros de calidad de aire (ug/m3)",
name.pol = c("pm10", "pm25", "co", "no2",
"o3_8h", "so2", "h2s"),
key = FALSE, ylab = "Parámetros")
#| tbl-cap: "Comparación de concentraciones diarias con el ECA-aire"
parametros <- c(
pm10 = "PM10",
pm25 = "PM2.5",
no2 = "NO2",
so2 = 'SO2',
h2s = "H2S",
co_8h = "CO (8h)",
co_8h = "CO (1h)",
o3_8h = "O3")
oms <- data.frame(
Parámetros = c(
"PM10", "PM2.5", "O3","NO2",
"SO2", "CO (1h)","CO (8h)"),
OMS  = c(
15, 45, 100, 25, 40, 35000,10000
))
df$eca %>%
mutate(fecha = as.Date(fecha, format = "%d-%B"),
fecha = format(fecha, format = "%d-%m")) %>%
mutate_if(is.numeric, round, digits = 1) %>%
pivot_longer(
cols = -fecha,
names_to = "Parámetros",
values_to = "val") %>%
pivot_wider(names_from = fecha, values_from = val) %>%
mutate(Parámetros = parametros,
ECA = c(100, 50, 200, 250,
150, 30000, 10000, 100)) %>%
full_join(oms) %>%
slice(4:7) %>%
kable("latex", booktabs = TRUE) %>%
kable_styling(latex_options = c("striped", "hold_position", "full_width"),
position = "center",
font_size = 8) %>%  # Ajusta el tamaño de la fuente
column_spec(0, width = "0.5cm") %>%  # Ajusta el ancho de la columna
row_spec(0, bold = FALSE)
#| fig-height: 12
#| fig-width: 10
source("Scripts/ggplot_graphics.R")
gg_grafico(lista = df,
estacion = "EPG",
file_name = "EPG",
color_linea = "aquamarine4")
head(df$df)
#| fig-height: 12
#| fig-width: 10
source("Scripts/ggplot_graphics.R")
gg_grafico(lista = df,
estacion = "EPG",
file_name = "EPG",
color_linea = "aquamarine4")
#| fig-height: 14
#| fig-width: 10
source("Scripts/facetas_hora.R")
faceta(df)
#| fig-height: 14
#| fig-width: 10
source("Scripts/facetas_hora.R")
faceta(df)
#| fig-height: 14
#| fig-width: 10
source("Scripts/facetas_hora.R")
faceta(df)
#| fig-height: 14
#| fig-width: 10
source("Scripts/facetas_hora.R")
faceta(df)
#| fig-height: 14
#| fig-width: 10
source("Scripts/facetas_hora.R")
faceta(df)
head(df$df)
#| fig-height: 14
#| fig-width: 10
source("Scripts/facetas_hora.R")
faceta(df)
#| include: false
source("Scripts/ECA2.R")
polar(df$df,location = "_unjbg2" )
#| fig-cap: "Gráficos polares de los principales parámetros evaluados"
knitr::include_graphics("polares/polares_unjbg2.png", dpi = 450)
#| fig-height: 3.6
#| fig-width: 7
source("Scripts/AQI.R")
aqi_index(df$eca)
#| fig-height: 3.6
#| fig-width: 7
source("Scripts/AQI.R")
aqi_index(df$eca)
#| fig-height: 3.6
#| fig-width: 7
source("Scripts/AQI.R")
aqi_index(df$eca)
truncc <- function(x, n){
as.integer(trunc(x*10^n))/10^n
}
truncc(df$df, 0)
truncc(df$df$pm10, 0)
#| fig-height: 3.6
#| fig-width: 7
source("Scripts/AQI.R")
aqi_index(df$eca)
#| include: false
nn <- windRose(mydata = df$df, plot = FALSE)
#| fig-cap: "Distibución de la dirección de los vientos"
windRose(mydata = df$df, plot = FALSE) -> a
a <- round(as.numeric(a$data$panel.fun[1]),2)
nn$data %>%
ggplot(aes(x = factor(wd), y = freqs)) +
geom_bar(stat = "identity", fill = "#08519C")+
theme_bw() +
labs(x = "Dirección de Viento (°)",
y = "Frecuencia (%)")
#| fig-cap: "Rosa de vientos"
#| fig-height: 4.5
windRose(mydata = df$df, paddle = F, cols = "viridis",
breaks = c(0,0.2,1.5, 3.3,5.4),
key.position = "right", include.lowest = FALSE)
#| fig-cap: "Datos horarios de los parámetros meteorológicos de la estación evaluada"
#| fig-height: 5
#| fig-width: 8
timePlot(
selectByDate(df$df),
pollutant = c("hr","pres",
"temp", "ws", "rad", "pp"),
y.relation = "free",plot.type = "h",
name.pol = c("%HR", "Pres","Temp",
"V.viento",
"Rad", "Precip"),
key = FALSE, ylab = "Parámetros")
gc()
df <- openxlsx::read.xlsx("dataset_actualizado_2023_2024.xlsx")
head(df)
tail(df)
df1 <- read.csv("input/CR1000_OCTUBRE_2024.csv")
head(df)
str(df1)
df1 <- read.csv("input/meteodiciembre2024.csv")
head(df1)
df1 <- read.csv("input/CR1000_OCTUBRE_2024.csv")
head(df1)
df1 <- read.csv("input/meteodiciembre2024.csv")
head(df1)
tail(df1)
df2 <- read.csv("input/pm_diciembre2024.csv")
df2 <- read.csv("input/pm_diciembre2024.csv", skip = 1)
df2 <- read.csv("input/pm_diciembre2024.csv", skip = 2)
head(df2)
tail(df2)
source("Scripts/ECA_mejorado.R")
View(pm)
View(df2)
View(df1)
ECA(meteo = "input/meteodiciembre2024.csv",
gases = "input/eca_2024_diciembre.csv",
pm = "input/pm_diciembre2024.csv",
fecha_inicio = "2024-12-01 00:00:00",
fecha_fin = "2025-01-01 23:00", estacion = "Unanue", tipo = "lista")
library(tidyverse)
library(openair)
ECA(meteo = "input/meteodiciembre2024.csv",
gases = "input/eca_2024_diciembre.csv",
pm = "input/pm_diciembre2024.csv",
fecha_inicio = "2024-12-01 00:00:00",
fecha_fin = "2025-01-01 23:00",
estacion = "Unanue",
tipo = "lista")
ECA(meteo = "input/meteodiciembre2024.csv",
gases = "input/eca_2024_diciembre.csv",
pm = "input/pm_diciembre2024.csv",
fecha_inicio = "2024-12-01 00:00:00",
fecha_fin = "2025-01-01 23:00",
estacion = "Unanue",
tipo = "lista") -> dfx
View(dfx)
dfx$df %>% View()
timePlot(mydata = dfx$df, pollutant = "temp")
timePlot(mydata = dfx$df, pollutant = "temp", type = "day")
timePlot(mydata = dfx$df, pollutant = "temp", type = "weekday")
dfx$df %>% select(date, temp)
dfx$df %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line()
dfx$df %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line() -> xd
plotly::ggplotly(xd)
windRose(dfx$df)
windRose(dfx$df, paddle = F)
windRose(dfx$df, paddle = F, type = "year")
windRose(dfx$df, paddle = F, type = "season")
ECA(meteo = "input/meteodiciembre2024.csv",
gases = "input/eca_2024_diciembre.csv",
pm = "input/pm_diciembre2024.csv",
fecha_inicio = "2024-12-07 00:00:00",
fecha_fin = "2025-01-01 23:00",
estacion = "Unanue",
tipo = "lista") -> dfx
dfx$df %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line() -> xd
plotly::ggplotly(xd)
plotly::ggplotly(xd + theme_bw())
library(ggthemes)
plotly::ggplotly(xd + theme_economist_white())
plotly::ggplotly(xd + theme_wsje())
plotly::ggplotly(xd + theme_wsj())
dfx$df %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray") -> xd
plotly::ggplotly(xd + theme_wsj())
dfx$df %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray10") -> xd
plotly::ggplotly(xd + theme_wsj())
dfx$df %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
setwd("C:/Users/Bryan/Downloads/DATA2025AIRE/nuevo")
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat")
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", skip = 1)
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", skip = 3)
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", skip = 4)
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", sep = ",")
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", sep = " ")
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", sep = " ", skip = 1)
head(df3)
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", sep = ",", skip = 1)
head(df3)
View(df3)
df1 <- read.csv("input/meteodiciembre2024.csv")
setwd("~/Airquality2024")
df1 <- read.csv("input/meteodiciembre2024.csv")
View(df1)
df1 <- read.csv("input/meteodiciembre2024.csv", skip = 1)
View(df1)
dfm <- cbind(df1, df3)
dfm <- rbind(df1, df3)
dfm %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray40") -> xd
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
ggplot(aes(TIMESTAMP, AirTC_Avg)) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
xd
dfm %>% select(TIMESTAMP, AirTC_Avg)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP)) %>%
ggplot(aes(TIMESTAMP, AirTC_Avg)) +
geom_line(color = "gray40") -> xd
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP))
dfm %>% select(TIMESTAMP, AirTC_Avg)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
ggplot(aes(TIMESTAMP, AirTC_Avg)) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
xd
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M"))
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>% head()
head(df1)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
filter(TIMESTAMP != "<NA>") %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
ggplot(aes(TIMESTAMP, AirTC_Avg)) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
XD
xd
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
filter(TIMESTAMP != "<NA>")
df1 <- read.csv("input/CR1000_OCTUBRE_2024.csv")
head(df1)
df1 <- read.csv("input/meteodiciembre2024.csv", skip = 1)
head(df1)
df1 <- read.csv("input/meteodiciembre2024.csv", skip = 3)
head(df1)
head(df3)
df1 %>% filter(TIMESTAMP !%in% c("TS", ""))
df1 %>% filter(TIMESTAMP != "TS")
names(df1)
df1 <- read.csv("input/meteodiciembre2024.csv", skip = 1)
head(df1)
df1 %>% filter(TIMESTAMP != "TS")
df1 %>% filter(TIMESTAMP != "TS" & !is.na(TIMESTAMP))
df1 %>% head()
df1 %>% slice(1:2)
df1 %>% slice(=1:2)
df1 %>% slice(-1:2)
df1 %>% slice(-c(1,2))
df1 <- df1 %>% slice(-c(1,2))
df3 <- df3 %>% slice(-c(1,2))
dfm <- rbind(df1, df3)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
filter(TIMESTAMP != "<NA>") %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
ggplot(aes(TIMESTAMP, AirTC_Avg)) +
geom_line(color = "gray40") -> xd
xd
View(dfm)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>% View()
str(dfm)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>% View()
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>% str()
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
ggplot(aes(TIMESTAMP, AirTC_Avg)) +
geom_line(color = "gray40")
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, AirTC_Avg)) +
geom_line(color = "gray40")
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, as.numeric(AirTC_Avg))) +
geom_line(color = "gray40")
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, as.numeric(AirTC_Avg))) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
tail(dfm)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, as.numeric(AirTC_Avg))) +
geom_line(color = "gray40") -> xd
xd
View(dfm)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
filter(TIMESTAMP >= "2024-12-01")
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M")) %>%
filter(TIMESTAMP >= "2024-12-01") %>% View()
tail(df1)
tail(df3)
df1 <- df1 %>% slice(-c(1,2)) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M"))
df3 <- df3 %>% slice(-c(1,2)) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M"))
dfm <- rbind(df1, df3)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, as.numeric(AirTC_Avg))) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
tail(dfm)
head(df1)
head(df3)
df3 <- df3 %>% slice(-c(1,2)) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP))
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", sep = ",", skip = 1)
df1 <- read.csv("input/meteodiciembre2024.csv", skip = 1)
df1 <- df1 %>% slice(-c(1,2)) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP, format = "%d/%m/%Y %H:%M"))
df3 <- df3 %>% slice(-c(1,2)) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP))
dfm <- rbind(df1, df3)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, as.numeric(AirTC_Avg))) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
View(dfm)
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", sep = ",", skip = 1)
setwd("C:/Users/Bryan/Downloads/DATA2025AIRE/nuevo")
df3 <- read.delim("GR_TACNA_CR1000_Table1.dat", sep = ",", skip = 1)
df3 <- df3 %>% slice(-c(1,2)) %>%
mutate(TIMESTAMP = as.POSIXct(TIMESTAMP))
head(df3)
str(df3)
dfm <- rbind(df1, df3)
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, as.numeric(AirTC_Avg))) +
geom_line(color = "gray40")
dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
filter(TIMESTAMP >= "2024-12-01") %>%
ggplot(aes(TIMESTAMP, as.numeric(AirTC_Avg))) +
geom_line(color = "gray40") -> xd
plotly::ggplotly(xd + theme_wsj())
setwd("~/Airquality2024")
df4 <- read.csv("input/pm_diciembre2024.csv", skip = 2)
View(df4)
df4 %>% select(Date, Time, tmoAmbientTemp_0)
df4 %>% select(Date, Time, tmoAmbientTemp_0) %>%
mutate(paste(Date, Time))
df4 %>% select(Date, Time, tmoAmbientTemp_0) %>%
mutate(date = paste(Date, Time)) %>%
df4 %>% select(Date, Time, tmoAmbientTemp_0) %>%
mutate(date = paste(Date, Time)) %>%
select(date, tmoAmbientTemp_0)
df4 <- read.csv("input/pm_diciembre2024.csv", skip = 2)
df4 %>% select(Date, Time, tmoAmbientTemp_0) %>%
mutate(date = paste(Date, Time)) %>%
select(date, tmoAmbientTemp_0)
df4 %>% select(Date, Time, tmoAmbientTemp_0) %>%
mutate(date = paste(Date, Time)) %>%
select(date, tmoAmbientTemp_0) -> a
names(a) <- c("date", "temp")
head(a)
head(dfm)
b <- dfm %>% select(TIMESTAMP, AirTC_Avg)
names(b) <- c("date", "temp")
head(b)
STR(DFM)
str(dfm)
str(a)
str()
str(b)
a %>% mutate(date = as.POSIXct(date))
a %>% mutate(date = as.POSIXct(date, format = "%Y-%m-%d %H:%M"))
a <- a %>% mutate(date = as.POSIXct(date, format = "%Y-%m-%d %H:%M"))
str(a)
str(b)
b <- dfm %>% select(TIMESTAMP, AirTC_Avg) %>%
mutate(temp = as.numeric(temp))
head(b)
b %>% filter(date > "2024-12-01")
b %>% filter(date > "2024-12-01") %>%
mutate(temp = as.numeric(temp))
b %>% filter(date > "2024-12-01") %>%
mutate(temp = as.numeric(temp)) -> b
geom_line(color = "gray40")
a %>% select(date, temp)
a %>% select(date, temp) %>%
ggplot(aes(date, temp)))
a %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray40")
b %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray40")
str(df4)
a %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray40")
df4 <- read.csv("input/pm_diciembre2024.csv", skip = 2)
df4 %>% select(Date, Time, tmoAmbientTemp_0) %>%
mutate(date = paste(Date, Time)) %>%
select(date, tmoAmbientTemp_0) -> a
a <- a %>% mutate(date = as.POSIXct(date, format = "%Y-%m-%d %H:%M"))
names(a) <- c("date", "temp")
b %>% select(date, temp) %>%
ggplot(aes(date, temp)) +
geom_line(color = "gray40")
ggplot(aes(date, temp), data = b) +
geom_line(color = "gray40")
ggplot() +
geom_line(color = "gray40", aes(date, temp), data = b) +
geom_line(aes(date, temp), data = a, color = "red")
View(df4)
xd <- ggplot() +
geom_line(color = "gray40", aes(date, temp), data = b) +
geom_line(aes(date, temp), data = a, color = "red")
plotly::ggplotly(xd)
